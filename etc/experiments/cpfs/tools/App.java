
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableModel;

/**
 *
 * @author vassaeve
 */
public class App extends javax.swing.JFrame {

    private static final long serialVersionUID = -2725465252741463686L;

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Рисовалка \"карты\" диска");

        jLabel1.setText("Файл-лог");

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Обновить");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 265, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getSize()+3f));
        jLabel2.setText(" ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(1284, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return (f.isFile() && f.getName().startsWith("fsck") && f.getName().endsWith(".log")) || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "fsck*.log only";
            }
        });
        fileChooser.setDialogTitle("Выбор fsck.log");
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                jLabel1.setText(fileChooser.getSelectedFile().getPath());
                parseFile(fileChooser.getSelectedFile());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        if (row == -1) {
            return;
        }
        int column = jTable1.getSelectedColumn();
        String add = mapkaExtend.get(rowsIdx.get(row) + "." + (column - 1));
        jLabel2.setText(add);
        if (SwingUtilities.isRightMouseButton(evt)) {
            String msg = mapka.get(rowsIdx.get(row) + "." + (column - 1)); //.replaceAll("<br>", ", ")
//            String newmsg = "";
//            String[] blocks = msg.split(",");
//            int count = 0;
//            for (String block : blocks) {
//                newmsg += " " + block;
//                count++;
//                if (count > 30) {
//                    count = 0;
//                    newmsg += "<br>";
//                }
//            }
            JOptionPane.showMessageDialog(this, msg, "", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            parseFile(new File(jLabel1.getText()));
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            App app = new App();
            app.setLocationRelativeTo(null);
            app.setVisible(true);
        });
    }

    Map<String, String> mapka;

    Map<String, String> mapkaExtend;

    List<String> rowsIdx;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void parseFile(File selectedFile) throws FileNotFoundException {
        rowsIdx = new ArrayList<>(0);
        mapka = new HashMap<>(0);
        mapkaExtend = new HashMap<>(0);

        FileReader fr = new FileReader(selectedFile);
//без радостей оптимизации
        BufferedReader br = new BufferedReader(fr);
        List<String> list = br.lines().collect(Collectors.toList());
        for (String str : list) {
            String[] row = str.split("data");
            if (row.length == 2) {
                String[] pos = row[0].split(",");
                String blk = pos[0].replaceAll("blk=", "").replace(",", "").trim();
                String offsetInBlock = pos[1].replaceAll("pos=", "").replace(",", "").trim();
                if (!rowsIdx.contains(blk)) {
                    rowsIdx.add(blk);
                }
                int posBlocks0 = posBlocks0 = row[1].indexOf("blocks0");
                String data = "";
                if (posBlocks0 != -1) {
                    String[] blocks_indir = row[1].substring(posBlocks0).split("indir");

                    String[] blocks = blocks_indir[0].replace("blocks0", "").replace("[", "").replace("]", "").split(",");
                    String[] indirs = blocks_indir[1].replace("[", "").replace("]", "").split(",");

                    mapkaExtend.put(blk + "." + offsetInBlock, row[1].substring(posBlocks0));
                }
                data = row[1].replaceAll(",", "<br>").replace("[", "<html>").replace("]", "</html>");
                mapka.put(blk + "." + offsetInBlock, data);
            } else {
                try {
                    //as is
                    String[] values = str.split(",");
                    String blk = values[0].split("=")[1];

                    String state = values[2].split("=")[1];
                    if (!rowsIdx.contains(blk)) {
                        rowsIdx.add(blk);
                        for (int i = 0; i < 8; i++) {
                            mapka.put(blk + "." + i, "data");
                        }
                    }
                } catch (Exception ex) {
                }
            }
        }

        Collections.sort(rowsIdx, (String o1, String o2) -> {
            try {
                return Long.parseLong(o1) < Long.parseLong(o2) ? -1 : 1;
            } catch (Exception ex) {
                return 0;
            }
        });

        jTable1.setModel(new TableModel() {
            @Override
            public int getRowCount() {
                return rowsIdx.size();
            }

            @Override
            public int getColumnCount() {
                return 9;
            }

            @Override
            public String getColumnName(int columnIndex) {
                return columnIndex == 0 ? "" : ((columnIndex - 1) + "");
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                if (columnIndex == 0) {
                    return rowsIdx.get(rowIndex);
                } else {
                    String val = mapka.get(rowsIdx.get(rowIndex) + "." + (columnIndex - 1));
                    return val == null ? "" : val;
                }
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {

            }

            @Override
            public void addTableModelListener(TableModelListener l) {
            }

            @Override
            public void removeTableModelListener(TableModelListener l) {
            }
        });
        jTable1.setRowHeight(70);
//        jTable1.setDefaultRenderer(String.class, new MyRenderer());
    }

//    class MyRenderer extends DefaultTableCellRenderer implements TableCellRenderer {
//
//        private static final long serialVersionUID = 3846424887913618631L;
//
//        @Override
//        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {
//            Component cell = super.getTableCellRendererComponent(table, value, selected, focused, row, column);
//            String add = mapkaExtend.get(rowsIdx.get(row) + "." + (column - 1));
//            if (add != null && !add.isEmpty()) {
//                cell.setFont(getFont().deriveFont(14f));
//                ((JComponent) cell).setToolTipText("<html>"+add+"</html>");
//            }
//            return cell;
//        }
//    }
}
